@startuml 2d_srpg_class
title 2DSRPG クラス図

left to right direction

enum TileType {
    GRASS = 1
    THICKET = 2
    FOREST = 3
    SAND = 4
    WATER = 5
    WALL = 6

    CASTLE_LEFT_TOP = 101
    CASTLE_RIGHT_TOP = 102
    CASTLE_LEFT_BOTTOM = 103
    CASTLE_RIGHT_BUTTON = 104

    CITY_LEFT = 111
    CITY_RIGHT = 112
}

class Unit {
    +string name {get; private set;}
    +int curret_hp {get; private set;}
    +Vector2Int pos {get; private set;}
    +UnitStatus status {get; private set;}
    +UnitClass class {get; private set;}
    +bool is_alive {get; privaate set;}
    +bool is_selected {get; private set;}
    +bool has_moved {get; private set;}
    +Sprite icon {get; private set;}
    +int level {get; private set;}

    +GridMove(Vector2 target_pos, Vector2Int target_grid_pos): void
    +GetMoveableArea(Tile[,] tile_map, int map_width, int map_height): List<Vector2Int>
    +Select(): void
    +DeSelect(): void
    +ResetTurnState(): void
    +TakeDamege(): void
}

class AllyUnit {
    +UnitGrowthRate growth_rate {get; private set;}
    +int exp {get; private set;}
    +GainExp(int exp_amount): void
    +LevelUp(): void
    +ClassPromote(): void
}

class EnemyUnit {
    +int base_exp_amount {get; private set;}
    +AIType ai_type {get; private set;}

    +MoveAgent(): void
}

enum AIType {
    IDLE
    REACTIVE
    AGGRESSIVE
}

class UnitStatus {
    +int max_hp {get; private set;}
    +int str {get; private set;}
    +int m_power {get; private set;}
    +int tec {getl private set;}
    +int agi {get; private set;}
    +int def {get; private set;}
    +int m_def {get; private set;}
    +int luck {get; private set;}
    +int physique {get; private set;}
}

class UnitGrowthRate {
    +int hp_rate {get; private set;}
    +int str_rate {get; private set;}
    +int m_power_rate {get; private set;}
    +int tec_rate {get; private set;}
    +int agi_rate {get; private set;}
    +int def_rate {get; private set;}
    +int m_def_rate {get; private set;}
    +int luck_rate {get; private set;}
    +int physique_rate {get; private set;}
}

class UnitClass {
    +string class_name
    +int move_cost {get; private set;}
    +Sprite icon {get; private set;}
}

class UnitUpperClass {

}

class UnitLowerClass {
    +UnitUpperClass promotable_class {get; private set;}
}

class MapManager {
    -MapInfo map_info
    -TileFactory tile_factory
    -CSVHandler csv_handler
    -Tile[,] map_tiles

    +ReadMapData(): int[,]
    +MapDisplay(): void
    +GetTileData(Vector2Int pos): Tile
    +UpdateMapData(Dictionary<Vector2Int, int>): void 
    +IsInBounds(Vector2Int pos): bool
    +RefreshMapDisplay(): void
}

class TileFactory {
    -TileTypePrefabPair[] tile_pairs
    -Dictionary<TileType, GameObject> tile_prefabs

    +InstantiateTile(TileType tile_type, Vector2 pos, Quaternion rotation): Tile
}

struct TileTypePrefabPair {
    +TileType type
    +GameObject prefab
}

TileFactory +-- TileTypePrefabPair

class MonoBehavior {

}

class ScriptableObject {

}

class CSVHandler {
    +async WriteCSV(string csv_file, List<string[]> write_data): WriteResult
    +async ReadCSV(string csv_file): ReadResult
}

struct ReadResult {
    +bool is_success
    +List<string[]> read_data
    +string error_message
}

struct WriteResult {
    +bool is_success
    +string error_message
}

CSVHandler +-- ReadResult
CSVHandler +-- WriteResult

class MapInfo {
    +string csv_file_name {get; private set;}
    +int width {get; private set;}
    +int height {get; private set;}
    +Vector2Int[] initial_pos_ally {get; private set;}
    +Vector2Int[] initial_pos_enemy {get; private set;}
}

abstract Tile {
    #TileType tile_type
    +string tile_name { get; protected set; }
    +int move_cost { get; protected set; }
    +int avo_increase { get; protected set; }
    +int hp_recover { get; protected set; }

    +GetCanMove(): bool
} 

note right of Tile::GetCanMove
    引数のユニットクラスがタイルを移動可能かを返す
end note

class Grass {

}

class Thicket {

}

class Fortress {

}

class Catsle {

}

class Sand {

}

class Forest {

}

class Water {

}

class Wall{

}

Unit --|> MonoBehavior
UnitClass --|> ScriptableObject
UnitStatus --|> ScriptableObject
AllyUnit --|> Unit
EnemyUnit --|> Unit
UnitUpperClass --|> UnitClass
UnitLowerClass --|> UnitClass

MapManager --> CSVHandler
MapManager --> TileFactory
MapManager --> Tile

MapInfo --|> ScriptableObject

Tile --|> MonoBehavior
Grass --|> Tile
Thicket --|> Tile
Fortress --|> Tile
Catsle --|> Tile
Sand --|> Tile
Forest --|> Tile
Wall --|> Tile
Water --|> Tile


@enduml